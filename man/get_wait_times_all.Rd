% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_wait_times.R
\name{get_wait_times_all}
\alias{get_wait_times_all}
\title{Get wait times for emergencies, consultations, and surgeries for all Hospitals covered by the "tempos" API}
\usage{
get_wait_times_all(output_format = c("json", "data_frame"),
  request_headers = "", data_type = c("emergency", "consultation",
  "surgery"), sleep_time = 1)
}
\arguments{
\item{output_format}{defines the format of the final output resulting form the API call. Two options:
(1) \code{output_format = "data_frame"} returns a tibble object;
(2) \code{output_format = "json"} returns the data as a json file}

\item{request_headers}{named character vector with the HTTP headers to be added to \code{\link[httr]{GET}} via \code{\link[httr]{add_headers}}. Defaults to \code{NULL}}

\item{data_type}{Character string determining the type of data to request. Can be either (1) \code{"emergency"}, (2) \code{"consultation"}, or \code{"surgery"}}

\item{sleep_time}{Integer defining the number of seconds to wait between API calls. Strongly recomend setting a sleeper time so as to not overloading the server. Defaults to 3 seconds.}
}
\value{
list with json strings or tibble. The relevant wait times for \code{"emergency"} are in both seconds as integer or \code{\link[lubridate]{ymd_hms}}. For \code{"consultation"} or \code{"surgery"} they unit of analysis is day as integer. All datasets also contain a variable measuring wait times by the number of people waiting.
}
\description{
This function loops across all hospital IDs and runs \code{\link{get_wait_times}} in order to extract all wait times
}
\examples{

library(esperaR)

\dontrun{
library(ggplot2)
## extract emergency data as a data frame
wait_dta <- get_wait_times_all(output_format = "data_frame", data_type = "consultation")

wait_dta \%>\%
 group_by(priority) \%>\%
 summarise(mean_wait_time = mean(as.integer(days), na.rm = TRUE)) \%>\%
 ungroup() \%>\%
 top_n(mean_wait_time, 10) \%>\%
 ggplot(aes(priority, mean_wait_time)) +
 geom_boxplot() +
 coord_flip()
}

}
